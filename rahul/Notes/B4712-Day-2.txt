Day 1 :

Date Feb 3rd 2025

Instruction to Python

1. Python is Open source. [ No license required ]

2. Case sensitive [ A and a are different ]

3. lot of libraries are available for data science , data engineering , big data, data analytics
  
   web framework.

4. Easy to learn not like java , C++ etc.


Lab 1 :

print("welcome to first day")


Lab 2 :

    read name from the console and print name:

    type() will return type of the variable


types:

1. str
2. int
3. float
4. Boolean  True , False


name=input("Enter your name  ")
print(name)
print(type)

====================================================================

lab 3:

age=input("Enter your age  ")
print("My age is   " , age  )
print(type(age))

===================================================================
lab 4:

# int() is a method converts given argument/value into integer
age=int(input("Enter your age  "))
print("My age is   " , age  )
print(type(age))
print("My Age by next year is " , age+1)

===============================================================

lab 5:


score=float(input("Enter your score  "))
print(type(score))

married=True
print(type(married))

===============================================================

lab 6:

# read three marks , print total and average

m1=int(input("Enter marks 1 ")
m2=int(input("Enter marks 2 ")
m3=int(input("Enter mars  3 ")

total=m1+m2+m3

avg=total/3

print("Total      = " , total)
print("Average    = " , avg)

=====================================================================

Conditional Statement:

# read marks from the console , print pass if  marks>=50 , otherwise fail

marks=int(input("Enter marks "  ))

if marks>=50:
   print("Pass")
else:
   print("Fail")
=========================================================================

# read two values , Print max of this no

a=int(input("Enter value for a  "))
b=int(input("Enter value for b  "))

if a >=b :
   print(a, " is bigger  ")
else:
   print(b, " is bigger  ")

==========================================================================

# read three values from the console, print biggest of three

a=int(input("Enter value for  a   " ))
b=int(input("Enter value for  b   "))
c=int(input("Enter value for  c   "))

if a >=b:
   biggest=a
else
   biggest=b

if biggest <=c:
   biggest=c

print("Biggest   =" , biggest)

=========================We have break 11.00 am to 11.15 am==================

//  returns quotient

print(5//2) returns 2 

/ real division

print(5/2) returns 2.5

% moduls operator , returns remainder

print(5%2) returns 1

=================================================================================

# eval

score=eval(input("Enter score  "))

print(score)

print(type(score))

==================================================================================

# A shop keeper gives discount based on the  amount purchased and rule is given below 

Amount          Disc

<1000           5%

1000-5000       7%

>5000           10%

we have to print amount , discount and netamount



amt=int(input("Enter amount value     "))

if amt < 1000:
   disc= 0.05*amt

if amt>=1000 and amt <=5000 :
   disc=0.07 * amt

if amt >5000:
   disc=0.1*amt

netamt=amt-disc

print("Amount         =" ,amt)
print("Discount       =" ,disc)
print("Net amount     = ",netamt)
=============================================================================

looping: A set of statements executed for a fixed no of times or as long as the condition is true


range(5)  , starts from 0 and ends with 4 , increment is 1

range(1,5)  sv=1  , fv=4 , incr is 1

range(1,10,2) iv=1,  fv=9, increment is 2

 
for x in range(5):  # 0,1,2,3,4
    print(x)

print("\n")  # \n makes one line spaces
for x in range(2,10):
    print(x)
    
print("\n") 
for x in range(1,10,2): # 1,3,5,7,9
    print(x)
    
==================================================================================

print nos from 1 to 10 using while loop

i=1
while i<=10:
      print(i)
      i=i+1

print(" Program ends  ")


==================================================================================

read value for n and print nos from 1 to n

1. Using for range

2. while



n=int(input("Enter value for n  "))
for i in range(1,n+1):
    print(i)

======================================================================================

i=1
n=int(input("Enter value for n  "))
while i <=n:
      i=i+1
      print(i)

=============================================================================

# task 

# read marks and print grade based on the rule given below


marks                Grade

>80                  First Grade


60-80                Second grade

>=40 and <60         third Grade

< 40                 Fail

=====================================================================================

marks=int(input("Enter marks   "))

if marks>80:
   print("First Grade   ")

if marks>=60 and marks <=80:
   print("Second Grade  ")

if marks>=40 and marks <60 :
   print("Third Grade  ")

if marks <40:
   print("Fail")

======================================================================================

Task :


read an integer value and print is it divisible by 5 or not

n=int(input("Enter value for   n  "))
if n%5==0:
   print(n , " is divisible by 5 ")
else:
   print(n , " is not divisible by 5 ")

===================================================================================

read an integer value , print is it odd or even

n=int(input("Enter value for   n  "))
if n%2==0:
   print(n , " is an even no  ")
else:
   print(n , " is an odd number ")


=================================Lunch time 1.00 pm to 2.00 pm========================


Task :

 read nos from the console.

 count no of positive nos
 
 count no of negative nos

 print both postive and negative 

 to stop enter 0 


nopos=0
noneg=0
while True:
   x=int(input("Enter value for x , To stop enter 0 "))
   if x==0:
      break               # break is used to exit from the loop

   if x < 0 :
      noneg=noneg+1

   if x > 0 :
      nopos=nopos+1

 print("Total no of positive  nos  = " , nopos)
 print("Total no of negative  nos  = ",  noneg)

=================================================================
# break is used to exit from the  loop
for i in range(1,14):
    if i==10:
    # results are negative
       break
    else:
       print(i)

=================================================================


break : this statement is used to exit from the loop




continue : this ignores current iteration and control goes to next iteration


# i want to print nos frm 1 to 12 , except 8

for i in range(1,13):
    if i==8:
       continue
    else:
       print(i)

==================================================================================

# i want to print nos from 1 to 12 , except  5 and 8

 
# i want to print nos frm 1 to 12 , except 5 and 8
for i in range(1,13):
    if i==5 or i==8 :
       continue  # continue ignores current iteration and executes next iteration
    else:
       print(i)


====================================================================================

Task :

 45 55  -65 -75  5  - 10   [ to stop enter 0 ]


Sum of pos nos  : 105
Sum of neg nos  : -150


psum=0
nsum=0
while True:
  x=int(input("Enter value for  x, To stop enter 0 " ))

  if x==0:
     break

  if x > 0:
     psum=psum+x 

  if x < 0
     nsum=nsum+x


print("Sum of  positive nos  " ,  psum)
print("Sum of  negative nos  " ,  nsum)

=====================================================================================
string

It is sequence of characters enclosed in  "  "

name="Keerthi s"
for i in name :   # we can iterate a string
    print(i)

============================================================================

read name from the console .

1. print the length of name

2. convert into upper case


name=input("Enter name  ")  # string is an object
print("Length  " , len(name))
print("Name  is in upper  " , name.upper())
print("Name  is in lower  " , name.lower())

===============================================================================

Task :

  Read name from the console .
  count how many vowels in the string

 input murugadoss

 output : 4

name=input("Enter name  ")  # string is an object
str=name.lower()
cnt=0
for i in str:
    if i=='a' or i=='e' or i=='i' or i=='o' or i=='u':
       cnt=cnt+1 
print("No of vowels in "  , name , " is  " , cnt )

==============================================================================

name=input("Enter name  ")  # string is an object
str=name.lower()
cnt=0
for i in str:
    if i=='a' or i=='e' or i=='i' or i=='o' or i=='u':
       cnt=cnt+1 
print("No of vowels in "  , name , " is  " , cnt )
================================================================================
#split(" ") we can use split based on spaces or "," or ";"
name="Murugadoss Natarajan Bangalore"
str=name.split(" ") #spliting string based on spaces.
print("My name       is       ", str[0])
print("My father's   name  is ", str[1])
print("My location is         ", str[2])
===============================================================================

str="Doss 50 60"

doss is name

50 and 60 are scores of two subjects


i need the following output

Name    : doss
Marks1  : 50
Marks2  : 60
Total   : 110

str="doss,50,60"
st=str.split(",")
print("Name   =" , st[0])
print("Marks 1   = " , st[1])
print("Marks 2   = " , st[2])
print("Total     =" , int(st[1])+int(st[2]))
===================================================================================

The isdigit() method is a built-in Python function that checks if all characters in a string are digits. 

This method returns True if each character in the string is a numeric digit (0-9), and False otherwise.

Letâ€™s start with a simple example of isdigit() method.

s = "12345"
print(s.isdigit())  

s2 = "1234a5"
print(s2.isdigit())

================================================================================

read  number say 4567  , print total of its digits 

Example : 4567 = 4+5+6+7 = 22

nos=input("Enter value for nos  ")
tot=0
for i in nos:
    tot=tot+int(i)
    
print("total of digits  " , tot)    


===============================================================================

The rstrip() method removes trailing whitespace characters from a string.

The lstrip() method removes leading whitespace characters from a string. 

strip() removes whitespaces from both ends

nos=input("Enter value for nos  ")
nos=nos.strip()
tot=0
for i in nos:
    tot=tot+int(i)
    
print("total of digits  " , tot)

=============================================================================
The isalpha() method checks if all characters in a given string are alphabetic.

 It returns True if every character in the string is a letter and False 

if the string contains any numbers, spaces, or special characters.


s1 = "HelloWorld"
res1 = s1.isalpha()
print(res1)

s2 = "Hello123"
res2 = s2.isalpha()
print(res2)

===================================================================================================

The count() method in Python returns the number of times a specified substring appears in a string.

 It is commonly used in string analysis to quickly check how often certain characters or words appear.

Letâ€™s start with a simple example of using count().

s = "hello world"
res = s.count("o")
print(res)

========================================================================================================

str="Python#$123"

Task is print sum of digits


str="Python#$123"
tot=0
for i in str:
    if i.isdigit():
       tot=tot+int(i)
print(tot)       
=======================================================================================================

1 . read temp in celcius , convert ito fahren ( fah = 1.8 * cel +32 )

cel =float(input("Enter value for temp in celcius "))
fah =1.8 * cel +32
print("Temp in celcius   =" , cel)
print("Temp in fahren    =" , fah)


2.  read temp in fahren  , convert into cel   cel=(fah-32)/1.8

fah=float(input("Enter temp in fahren   "))
cel=(fah-32)/1.8
print("Temp in fahren    =" , fah)
print("Temp in celcius   =" , cel)



3. Read value for N .[ Max value is 6 ].

   find factorial of N

    !N = 1*2*3 ....(N-1)*N

n=int(input("Enter value for n  "))
f=1
for i in range(2,n+1):
    f=f*i

print("Factorial of " , n , " is   " , f)

===========================================================================================================

Covered today:

1. data types
2. type()
3. input() , int() , float(),eval()
4. if
5. range, while
6. break , continue
7. string, its functions like upper(),lower(), len(), isdigit(), split().isalpha() , rstrip(), lstrip(), strip()
8. some coding parts

======================================================================================================== 

Tommorrow class: 4th feb 2025

Day 2 :

1. List

a) List is a collection of different types of elements 
b) elements are enclosed in [ ]
c) elements are accessed by its index . Index starts from 0, 1, 2 , etc, if we access from left to right
d) elements can be accessed from right to left , starting  -1 ,-2,-3 , etc
e) elements in the list can be modified [ Mutable ]

Lab 1:

marks=[]
print(type(marks))
print("Length of list   " , len(marks))


lab 2:

staff=["doss", 45, 93.33 , True]
print("Name  =" , staff[0])  # index is used to access its elements. Index starts from 0   from left to right
print("Age   =" , staff[1])
print("Score =" , staff[-2])  # we access its elements from right to left. Index starts from -1,-2, etc
staff[1]=43                   # we modify the value . it is possible in the list [ mutable ]
print(staff)
print("\n")
for i in staff:
    print(i)


Note: It is similar to array variable . Array contains fixed no of elements  and all elements are same type
      In List , it is a varrying no of elements and  elements can be of different type.

Lab 3: 

append() is a method to add element  at the end of the list

Task : create an empty list say marks .  add five marks from the console and list

marks=[]
for i in range(5):
    x=int(input("Enter value for marks  "))
    marks.append(x)
print(marks)    

# we have aggregate functions max, min, sum
print("Max marks         " , max(marks))
print("Min marks         " , min(marks))
print("Total             " , sum(marks))
print("Length of list    " , len(marks))
======================================================================================

Task:

we have list called score=[23,45,67,89,12]

write python script to print how many scores 50 and above and how many less than 50

score=[23,45,67,89,12]
pcnt=0
ncnt=0
for i in score:
    if i>=50:
       pcnt=pcnt+1
    else:
       ncnt=ncnt+1
print(pcnt)
print(ncnt)

=====================================================================================

we have list  score=[23,45,67,89,12].

1. Create two lists a) pmarks  containing all marks 50 and above
                    b) nmarks  containing all marks < 50

print marks , pmarks and nmarks

===============================================================================

score=[23,45,67,89,12]
pmarks=[]
fmarks=[]
for i in score:
    if i >=50:
       pmarks.append(i)
    else:
       fmarks.append(i)

print(score)
print("\nList contains marks 50 and above " , pmarks)
print("List contains marks < 50         " , fmarks)

==================================================================================

List Comprehension in Python


List comprehension is a way to create lists using a concise syntax.
 
It allows us to generate a new list by applying an expression to each item 

in an existing iterable (such as a list or range). This helps us to write cleaner, 

more readable code compared to traditional looping techniques.

syntax:

newlist = [expression for item in iterable if condition == True]

The return value is a new list, leaving the old list unchanged.


score=[23,45,67,89,12]
pmarks=[ i  for i in score if i>=50]
fmarks=[ i   for i in score if i<50]
print(score)
print(pmarks)
print(fmarks)
==================Break time 11.00 am to 11.15 am====================================

we have to create newlist that contains "a" in the fruits

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits if "a" in x]

print(newlist)

==================================================================================

Only accept items that are not "apple":

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits if x != "apple"]

print(newlist)

==============================================================================
Only accept items that are not "apple":

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x.upper() for x in fruits]

print(newlist)

Task :


================================================================

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

create newfruits that contains fruits whose length is 4 or 5
========================================================================

create two list evenos and oddnos from range(10) using list comprehension

evenos=[x for x in range(10) if x % 2 ==0]
oddnos=[x for x in range(10) if x % 2 !=0]
print(evenos)
print(oddnos)

=======================================================================

cel=[10,15,20,25,30,35,40]

create list fah that contains temp in fah for the corresponding elements in cel

fah=[x*1.8+32 for x  in cel]
==========================================================================

fah=[100,101,102,103,104,105]

cel = [ (x-32)/1.8  for x in fah  ] 

print(fah)
print(cel)

create list cel contains temp in celcius for the corresponding elements in fah

============================================================================

x = [1, 2, 3, 4, 5] 

# Add 'Even' for even numbers, otherwise 'Odd'

result = ['Even' if i % 2 == 0 else 'Odd' for i in x] 
 
print(result)


====================================================================================
Remove empty strings from a list of strings

Given:

str_list = ["Emma", "Jon", "", "Kelly", None, "Eric", ""]

Expected Output:

Original list of sting

['Emma', 'Jon', '', 'Kelly', None, 'Eric', '']

After removing empty strings

['Emma', 'Jon', 'Kelly', 'Eric']

soution:

str_list = ["Emma", "Jon", "", "Kelly", None, "Eric", ""]

res_list = []

for s in str_list:

    # check for non empty string

    if s:

        res_list.append(s)

print(res_list)

========================================================================

Split a string on hyphens

Write a program to split a given string on hyphens and display each substring.

Given:

str1 = Emma-is-a-data-scientist

Expected Output:

Displaying each substring

Emma
is
a
data
scientist

======================================================================================

Removal all characters from a string except integers

Given:

str1 = 'I am 25 years and 10 months old'

Expected Output:

2510


===========================Lunch break is 1.00 pm to 2.00 pm==========================


Python list slicing is fundamental concept that let us easily access specific elements in a list. 

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get elements from index 1 to 4 (excluded)

print(a[1:4])



list_name[start : end : step]


Parameters:

start (optional): Index to begin the slice (inclusive). Defaults to 0 if omitted.

end (optional): Index to end the slice (exclusive). Defaults to the length of list if omitted.

step (optional): Step size, specifying the interval between elements. Defaults to 1 if omitted


To retrieve all items from a list, we can use slicing without specifying any parameters.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get all elements in the list
print(a[::])
print(a[:])


Explanation: Using [:] & [::] without specifying any start, end, or step 
returns all elements of the list.
=====================================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get elements starting from index 2
# to the end of the list
b = a[2:]
print(b)

===========================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Get elements starting from index 0 
# to index 3 (excluding 3th index)
c = a[:3]
print(c)

=======================================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Get every second element from the list
# starting from the beginning
b = a[::2]
print(b)
======================================================================
Out-of-bound slicing

In Python, list slicing allows out-of-bound indexing without raising errors. 

If we specify indices beyond the list length then it will simply return the available items.

Example: The slice a[7:15] starts at index 7 and attempts to reach index 15, 

but since the list ends at index 8, so it will return only the available elements (i.e. [8,9]).

=======================================================================================

Negative Indexing:

Negative indexing is useful for accessing elements from the end of the list. 

The last element has an index of -1, the second last element -2, and so on.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get elements starting from index -2
# to end of list
b = a[-2:]
print(b)

==============================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get elements starting from index 0 
# to index -3 (excluding 3th last index)
c = a[:-3]
print(c)

=================================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Get elements from index -4
# to -1 (excluding index -1)
d = a[-4:-1]
print(d)

===============================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Get elements from index -4
# to -1 (excluding index -1)
d = a[-4:-1]
print(d)
================================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# Get elements from index -4
# to -1 (excluding index -1)
d = a[-4:-1]
print(d)
=================================================================
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get every 2nd elements from index -8

# to -1 (excluding index -1)
e = a[-8:-1:2]
print(e)

============================================================

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Get the entire list using negative step
b = a[::-1]
print(b)
===============================================================

tuple :

it is similar to list except

1. elements can not be modified or added or deleted

2. elements are enclosed in  ()


lab 1 :

score=()
print(type())

lab 2:

marks=(23, 45, 67)

marks[0]= 55  # can not be modified

===================================================================
score=()
print(type(score))
marks=(23,45,67)
print(marks)
print(type(marks))
#marks[0]=87 # it is immutable can not be modified or added or deleted
#since tuple items can not be modified , we can convert into list, change it 
# again put back to tuple
marks=list(marks)

print(type(marks))
marks[0]=90
marks=tuple(marks)
print(marks)
===========================================================================
score=()
print(type(score))
marks=(23,45,67)
print(marks)
print(type(marks))
#marks[0]=87 # it is immutable can not be modified or added or deleted
#since tuple items can not be modified , we can convert into list, change it 
# again put back to tuple
marks=list(marks)
print(marks)
marks.append(99)  #appending element into list
print(marks)
marks.insert(1,55) #insert method used to insert an element at the specified insdex
print(marks)
print(type(marks))
marks[0]=90
marks=tuple(marks)
print(marks)
=================================================================================

what ever we can do in list , can be done , except add , update and delete.
we can do aggregations also
===================================================================================

dictinary

1. elements are enclosed in  { }

2. it has key value  pair <k,v> k is key(immutable) and v is value it is mutable


passportno=========>name of person

pancard ===========> name of person

for a given vechile number , we can get all details .


staff={"name" : "doss",
        "age" :  45 ,
        "loc" : "Bangalore"}

print(type(staff))
print(staff)

=====================================================================================
staff={"name" : "doss",
        "age" :  45 ,
        "loc" : "Bangalore"}

print(type(staff))
print(staff)
# print only keys
print("\n")
for i in staff:
    print(i)
# print only keys
print("\n")
for i in staff.keys():
    print(i)
# To print values
print("\n")
for i in staff.values():
    print(i)
=====================================================================================
staff={"name" : "doss",
        "age" :  45 ,
        "loc" : "Bangalore"}

print("To print key value pairs \n")
for i in staff.items():  # items() method to print key value pairs 
    print(i)
    
print("To print key value pairs \n")
for i,j in  staff.items():
    print(i,"--->",j)

===============================================================================

staff={"name" : "doss",
        "age" :  45 ,
        "loc" : "Bangalore"}
print("To print key value pairs \n")

for i in staff.items():  # items() method to print key value pairs 
    print(i)

print("To print key value pairs \n")
for i,j in  staff.items():
    print(i,"--->", j)
# dictionary values  are mutable - can be changed 

staff["loc"]="Chennai"
print(staff)

=========================Break 3.20 pm to 3.35 pm=======================================================















Count all letters, digits, and special symbols from a given string

Given:

str1 = "P@#yn26at^&i5ve"

Expected Outcome:

Total counts of chars, digits, and symbols 

Chars = 8 
Digits = 3 
Symbol = 4

def find_digits_chars_symbols(sample_str):
    char_count = 0
    digit_count = 0
    symbol_count = 0
    for char in sample_str:
        if char.isalpha():
            char_count += 1
        elif char.isdigit():
            digit_count += 1
        # if it is not letter or digit then it is special symbol
        else:
            symbol_count += 1

    print("Chars =", char_count, "Digits =", digit_count, "Symbol =", symbol_count)

sample_str = "P@yn2at&#i5ve"
print("total counts of chars, Digits, and symbols \n")
find_digits_chars_symbols(sample_str)

=========================================================================================

 Calculate the sum and average of the digits present in a string
Given a string s1, write a program to return the sum and average of the digits that appear in the string, 

ignoring all other characters.

Given:

str1 = "PYnative29@#8496"

Expected Outcome:


Sum is: 38 Average is  6.333333333333333



input_str = "PYnative29@#8496"
total = 0
cnt = 0
for char in input_str:
    if char.isdigit():
        total += int(char)
        cnt += 1

# average = sum / count of digits
avg = total / cnt
print("Sum is:", total, "Average is ", avg)

=========================================================================

https://www.geeksforgeeks.org/python-list-slicing/








str1 = 'I am 25 years and 10 months old'

print("Original string is", str1)


# Retain Numbers in String


# Using list comprehension + join() + isdigit()

res = "".join([item for item in str1 if item.isdigit()])


print(res)

==============================================================================================



Example

Return "orange" instead of "banana":

newlist = [x if x != "banana" else "orange" for x in fruits]









2. Tuple

3. Set

4. Dictionary

5. User defined function

6. Lambda functions

====================================================================================================


































The join() method in Python is used to concatenate the elements of an iterable 

(such as a list, tuple, or set) into a single string with a specified delimiter placed between each element.




























9 am

11 to 11.15 am

1.00 pm to 2.00 pm  lunch

3.00 pm to 3.15 pm break

 5.45 pm closing time


